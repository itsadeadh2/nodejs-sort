AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy Express.js app as Lambda with URL

Parameters:
  SourceCommit:
    Type: String
    Description: The commit that originated this deployment. Helps trigger new deploys to the lambda.

Resources:
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-${SourceCommit}"
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Code:
        S3Bucket: node-sort-bucket
        S3Key: lambda.zip
      Runtime: nodejs18.x
      MemorySize: 128
      Timeout: 30
      Layers:
        - !Ref LambdaLayer

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaBasicExecution"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  MyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt MyLambdaFunction.Arn
      Principal: apigateway.amazonaws.com

  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - nodejs18.x
      Content:
        S3Bucket: node-sort-bucket
        S3Key: dependencies.zip

  MyApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "MyApi"

  MyApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - MyApi
          - RootResourceId
      PathPart: "{proxy+}"
      RestApiId:
        Ref: MyApi

  MyApiMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: MyApiResource
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "ANY"
      ResourceId:
        Ref: MyApiResource
      RestApiId:
        Ref: MyApi
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri:
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations
            - MyLambdaFunction: !GetAtt MyLambdaFunction.Arn

  MyApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: MyApiMethod
    Properties:
      RestApiId:
        Ref: MyApi
      StageName: "prod"

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL for Prod stage for MyApi"
    Value:
      Fn::Sub: "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
